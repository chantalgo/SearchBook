<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ns1="*"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   width="1024" height="768"
					   skinClass="skins.ScrollingSkin"
					   maxWidth="1024"
					   maxHeight="768"
					   title="Searchbook">
	<fx:Style source="stylesheet.css"/>
	<fx:Script>
		<![CDATA[
			import com.facebook.graph.FacebookDesktop;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			
			private const positions:ArrayList = calculatePositions();;
			private const userPositions:ArrayList = calculateUserPositions();
			private const groupPositions:ArrayList = calculateGroupPositions();
			private const eventPositions:ArrayList = calculateEventPositions();
			private const pagePositions:ArrayList = calculatePagePositions();
			
			private const initAngle:int = 45;
			
			private var counter:int;
			private var usercount:int;
			private var groupcount:int;
			private var eventcount:int;
			private var pagecount:int;
			
			private var currentSearch:String;
			
			private var page:int;
			private var peopleResult:Object;
			private var peopleFail:Object;
			private var eventResult:Object;
			private var eventFail:Object;
			private var groupResult:Object;
			private var groupFail:Object;
			private var pageResult:Object;
			private var pageFail:Object;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				FacebookDesktop.init("279597868748971", loginHandler );
				
			}
			protected function loginHandler(success:Object,fail:Object):void { 
				if(success){ 
					currentState="loggedIn";
					nameLbl.text=success.user.name;
					userImg.source=FacebookDesktop.getImageUrl(success.uid,"square");
					//birthdayLbl.text=success.user.birthday;
					//FacebookDesktop.api("/me/statuses",getStatusHandler);
					
				}
			}
			
			//Calls a Facebook log in window 
			protected function login():void
			{
				FacebookDesktop.login(loginHandler, ["user_birthday","read_stream", "friends_location"]);
				
			}
			protected function logout():void { 
				FacebookDesktop.logout(); 
				this.searchBox.text="";
				currentState="loggedOut";
			}
			/*protected function getStatusHandler(result:Object, fail:Object):void {
				statusLbl.text=result[0].message;
			}*/
			
			protected function displayResults(result:Object, toolTipInfo:String):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), toolTipInfo) ;
				resultInfo.x = (positions.getItemAt(counter) as Point).x;
				resultInfo.y = (positions.getItemAt(counter) as Point).y;
				
				displayGroup.addElement(resultInfo);
				counter++;
			}
			
			/**
			 * Single Category Searches
			 **/
			protected function userDisplayFunction(result:Object, fail:Object):void
			{
				displayResults(result, createUserToolTip(result));
			}
			protected function groupDisplayFunction(result:Object, fail:Object):void
			{
				displayResults(result, createGroupToolTip(result));
			}
			protected function eventDisplayFunction(result:Object, fail:Object):void
			{
				displayResults(result, createEventToolTip(result));
			}
			protected function pageDisplayFunction(result:Object, fail:Object):void
			{
				displayResults(result, createPageToolTip(result));
			}
			
			/**
			 * All Search
			 */
			protected function userDisplayQuad(result:Object, fail:Object):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), createUserToolTip(result)) ;
				resultInfo.x = (userPositions.getItemAt(usercount) as Point).x;
				resultInfo.y = (userPositions.getItemAt(usercount) as Point).y;
				
				displayGroup.addElement(resultInfo);
				usercount++;
			}
			protected function groupDisplayQuad(result:Object, fail:Object):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), createGroupToolTip(result)) ;
				resultInfo.x = (groupPositions.getItemAt(groupcount) as Point).x;
				resultInfo.y = (groupPositions.getItemAt(groupcount) as Point).y;
				
				displayGroup.addElement(resultInfo);
				groupcount++;
			}
			protected function eventDisplayQuad(result:Object, fail:Object):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), createEventToolTip(result)) ;
				resultInfo.x = (eventPositions.getItemAt(eventcount) as Point).x;
				resultInfo.y = (eventPositions.getItemAt(eventcount) as Point).y;
				
				displayGroup.addElement(resultInfo);
				eventcount++;
			}
			protected function pageDisplayQuad(result:Object, fail:Object):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), createPageToolTip(result)) ;
				resultInfo.x = (pagePositions.getItemAt(pagecount) as Point).x;
				resultInfo.y = (pagePositions.getItemAt(pagecount) as Point).y;
				
				displayGroup.addElement(resultInfo);
				pagecount++;
			}
			
			/**
			 * Tooltip creation
			 */
			protected function createUserToolTip(result:Object):String
			{
				var toolTipInfo:String = new String();
				
				if(!(result.location == undefined))
				{
					if(result.location.hasOwnProperty("name"))
					{
						toolTipInfo = result.name + "\n" + result.location.name;
					}
				}
				else{
					toolTipInfo = result.name;
				}
				
				return toolTipInfo;
			}
			protected function createGroupToolTip(result:Object):String
			{
				var toolTipInfo:String = new String();
				
				if(result.hasOwnProperty("description"))
				{
					var des:String = result.description;
					if (des.length > 150)
					{
						toolTipInfo = des.slice(0, 150) + "...";
					}
					else
					{
						toolTipInfo = des;
					}
				}
				else
				{
					toolTipInfo = "(no description)";
				}
				
				return toolTipInfo;
			}
			protected function createEventToolTip(result:Object):String
			{
				var toolTipInfo:String = new String();
				
				if (result.hasOwnProperty("start_time"))
				{
					var start:String = result.start_time;
					var sdate:String = start.split("T",2)[0];
					var stime:String = start.split("T",2)[1];
					
					
					toolTipInfo += "Start: " + formatDate(sdate) + " " + formatTime(stime) + "\n";	
				}
				if (result.hasOwnProperty("end_time"))
				{
					var end:String = result.end_time;
					var edate:String = end.split("T",2)[0];
					var etime:String = end.split("T",2)[1];
					
					toolTipInfo += "End: " + formatDate(edate) + " " + formatTime(etime) + "\n"
				}
				if (result.hasOwnProperty("location"))
				{
					toolTipInfo += "Location: " + result.location;
				}
				
				if (toolTipInfo == "")
				{
					toolTipInfo = "no result";
				}
				
				return toolTipInfo;
			}
			protected function createPageToolTip(result:Object):String
			{
				var toolTipInfo:String = new String();
				
				if(result.hasOwnProperty("category"))
				{
					toolTipInfo += result.category + "\n";
				}
				if(result.hasOwnProperty("bio"))
				{
					var bio:String = result.bio;
					if (bio.length > 150)
					{
						toolTipInfo += "Bio: " + bio.slice(0, 150) + "...";
					}
					else
					{
						toolTipInfo += "Bio: " + bio;
					}
				}
				
				if (toolTipInfo == "")
				{
					toolTipInfo = "(no description)";
				}
				
				return toolTipInfo;
			}
			
			protected function calculatePositions():ArrayList{
				var myArrayList:ArrayList = new ArrayList();
				
				//var height:int = Math.abs(displayGroup.scaleGridBottom - displayGroup.scaleGridTop);
				//var halfHeight:int = height/2;
				//var center:int = (displayGroup.scaleGridBottom + displayGroup.scaleGridTop)/2;

//				var centerX:int = 240;
//				var centerY:int = 320;
//				var height:int = 650;
				
				var centerX:int = 310;
				var centerY:int = 312;
				var height:int = 610;
				
				var halfHeight:int = height/2;
				var width:int = 675;
				var halfWidth:int = width/2;
				
				var numLevels:int = 3;
				var i:int = 0;
				var j:int = 0;
				var numPoints:int = 0;
				
				var angle:int = initAngle;
				var angleIncrement:int = 0;
				var currentLevel:int = 0;
				
				var tempX:int = 0;
				var tempY:int = 0;
				var distanceX:int = 0;
				var distanceY:int = 0;
				
				while(i<numLevels){ //loop through all levels
//					angle = initAngle;
					currentLevel = i+1;
					//numPoints = currentLevel*4; //how many points to add per level
					if (currentLevel==1){
						numPoints = 4;
						angle=initAngle;
					}
					else if (currentLevel==2){
						numPoints = 8;
						angle = initAngle-22.5;
					}
					else if (currentLevel==3){
						numPoints = 12;
						angle = initAngle-30;	
					}
					else{
						numPoints = 4;
					}
					angleIncrement = 360/numPoints; //how much to increment the angle
					if (currentLevel==1){
						distanceX = 3*(halfWidth/numLevels)/4  + /*+ 15 + */(halfWidth/numLevels)*(i);
						distanceY = 3*(halfHeight/numLevels)/4 + (halfHeight/numLevels)*(i);
					}
					else{
						distanceX = 3*(halfWidth/numLevels)/4 + /*+ 15 + */(halfWidth/numLevels)*(i);
						distanceY = 3*(halfHeight/numLevels)/4 + (halfHeight/numLevels)*(i);
					}
					while (j<numPoints){
						angle -= angleIncrement;
						if (angle < 0)
							angle+=360;
						tempX = centerX + (distanceX)*Math.cos(angle*Math.PI/180);
						tempY = centerY + (distanceY)*Math.sin(angle*Math.PI/180);
						myArrayList.addItem(new Point(tempX , tempY));
						j++;
					}
					j = 0;
					i++;
				}
				
				return myArrayList;
			}
			
			//top right corner?
			protected function calculateUserPositions():ArrayList{
				var groupPositions:ArrayList = new ArrayList();
				
				var allPositions:ArrayList = calculatePositions();
				
				//0,4,5,12,13,14
				groupPositions.addItem(allPositions.getItemAt(0) as Point);
				groupPositions.addItem(allPositions.getItemAt(4) as Point);
				groupPositions.addItem(allPositions.getItemAt(5) as Point);
				groupPositions.addItem(allPositions.getItemAt(12) as Point);
				groupPositions.addItem(allPositions.getItemAt(13) as Point);
				groupPositions.addItem(allPositions.getItemAt(14) as Point);
				
				return groupPositions;
			}
			
			protected function calculateGroupPositions():ArrayList{
				var groupPositions:ArrayList = new ArrayList();
				
				var allPositions:ArrayList = calculatePositions();
				
				groupPositions.addItem(allPositions.getItemAt(1) as Point);
				groupPositions.addItem(allPositions.getItemAt(6) as Point);
				groupPositions.addItem(allPositions.getItemAt(7) as Point);
				groupPositions.addItem(allPositions.getItemAt(15) as Point);
				groupPositions.addItem(allPositions.getItemAt(16) as Point);
				groupPositions.addItem(allPositions.getItemAt(17) as Point);
				
				return groupPositions;
			}
			
			protected function calculateEventPositions():ArrayList{
				var eventPositions:ArrayList = new ArrayList();
				
				var allPositions:ArrayList = calculatePositions();
				
				eventPositions.addItem(allPositions.getItemAt(2) as Point);
				eventPositions.addItem(allPositions.getItemAt(8) as Point);
				eventPositions.addItem(allPositions.getItemAt(9) as Point);
				eventPositions.addItem(allPositions.getItemAt(18) as Point);
				eventPositions.addItem(allPositions.getItemAt(19) as Point);
				eventPositions.addItem(allPositions.getItemAt(20) as Point);
				
				return eventPositions;
			}
			
			protected function calculatePagePositions():ArrayList{
				var pagePositions:ArrayList = new ArrayList();
				
				var allPositions:ArrayList = calculatePositions();
				
				pagePositions.addItem(allPositions.getItemAt(3) as Point);
				pagePositions.addItem(allPositions.getItemAt(10) as Point);
				pagePositions.addItem(allPositions.getItemAt(11) as Point);
				pagePositions.addItem(allPositions.getItemAt(21) as Point);
				pagePositions.addItem(allPositions.getItemAt(22) as Point);
				pagePositions.addItem(allPositions.getItemAt(23) as Point);
				
				return pagePositions;
			}
			
			protected function userSearchResults(result:Object, fail:Object):void {
				var count:int;
				if (page == 1){
					peopleResult = result;
					peopleFail = fail;
					count = 0;
					counter = 0;
					if (result.length > 0){
					//check index of array don't go out of Bounds
						if (result.length < 24)
							forwardImage.visible = false;
						while (count < 24 && count < result.length){
							FacebookDesktop.api(result[count].id, userDisplayFunction);
							count++;
						}
					}
				}
				if(page == 2){
					count = 24;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 48)
							forwardImage.visible = false;
						while (count < 44 && count < result.length){
							FacebookDesktop.api(result[count].id, userDisplayFunction);
							count++;
						}
					}
				}
				if(page == 3){
					count = 44;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						while (count < 64 && count < result.length){
							FacebookDesktop.api(result[count].id, userDisplayFunction);
							count++;
						}
					}
				}
			}
			protected function groupSearchResults(result:Object, fail:Object):void {
				var count:int;
				if (page == 1){
					groupResult = result;
					groupFail = fail;
					count = 0;
					counter = 0;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 24)
							forwardImage.visible = false;
						while (count < 24 && count < result.length){
							FacebookDesktop.api(result[count].id, groupDisplayFunction);
							count++;
						}
					}
				}
				if(page == 2){
					count = 24;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 48)
							forwardImage.visible = false;
						while (count < 44 && count < result.length){
							FacebookDesktop.api(result[count].id, groupDisplayFunction);
							count++;
						}
					}
				}
				if(page == 3){
					count = 44;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						while (count < 64 && count < result.length){
							FacebookDesktop.api(result[count].id, groupDisplayFunction);
							count++;
						}
					}
				}
			}
			protected function eventSearchResults(result:Object, fail:Object):void {
				var count:int;
				if (page == 1){
					eventResult = result;
					eventFail = fail;
					count = 0;
					counter = 0;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 24)
							forwardImage.visible = false;
						while (count < 24 && count < result.length){
							FacebookDesktop.api(result[count].id, eventDisplayFunction);
							count++;
						}
					}
				}
				if(page == 2){
					count = 24;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 48)
							forwardImage.visible = false;
						while (count < 44 && count < result.length){
							FacebookDesktop.api(result[count].id, eventDisplayFunction);
							count++;
						}
					}
				}
				if(page == 3){
					count = 44;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						while (count < 64 && count < result.length){
							FacebookDesktop.api(result[count].id, eventDisplayFunction);
							count++;
						}
					}
				}
			}
			protected function pageSearchResults(result:Object, fail:Object):void {
				var count:int;
				if (page == 1){
					pageResult = result;
					pageFail = fail;
					count = 0;
					counter = 0;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 24)
							forwardImage.visible = false;
						while (count < 24 && count < result.length){
							FacebookDesktop.api(result[count].id, pageDisplayFunction);
							count++;
						}
					}
				}
				if(page == 2){
					count = 24;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						if (result.length < 48)
							forwardImage.visible = false;
						while (count < 44 && count < result.length){
							FacebookDesktop.api(result[count].id, pageDisplayFunction);
							count++;
						}
					}
				}
				if(page == 3){
					count = 44;
					counter = 4;
					if (result.length > 0){
						//check index of array don't go out of Bounds
						while (count < 64 && count < result.length){
							FacebookDesktop.api(result[count].id, pageDisplayFunction);
							count++;
						}
					}
				}
			}
			
			protected function userSearchQuad(result:Object, fail:Object):void
			{
				usercount=0;
				for (var i:int=0; i<6 && i<result.length; i++)
				{
					FacebookDesktop.api(result[i].id, userDisplayQuad);
				}
			}
			protected function pageSearchQuad(result:Object, fail:Object):void
			{
				pagecount=0;
				for (var i:int=0; i<6 && i<result.length; i++)
				{
					FacebookDesktop.api(result[i].id, pageDisplayQuad);
				}
			}
			protected function groupSearchQuad(result:Object, fail:Object):void
			{
				groupcount=0;
				for (var i:int=0; i<6 && i<result.length; i++)
				{
					FacebookDesktop.api(result[i].id, groupDisplayQuad);
				}
			}
			protected function eventSearchQuad(result:Object, fail:Object):void
			{
				eventcount=0;
				for (var i:int=0; i<6 && i<result.length; i++)
				{
					FacebookDesktop.api(result[i].id, eventDisplayQuad);
				}
			}
			
			protected function formatDate(date:String):String
			{
				var arr:Array = date.split('-', 3);
				
				var date:String = arr[1] + "/" + arr[2] + "/" + arr[0];
				
				return date;
			}
			
			protected function formatTime(time:String):String
			{
				var arr:Array = time.split(':', 3);
				var hour:int = parseInt(arr[0]);
				var min:int = parseInt(arr[1]);
				var flag:String = "AM";
				
				
				if (hour == 0)
				{
					hour = 12;
				}
				else if (hour >= 12)
				{
					flag = "PM";
					hour -= 12;
				}
				
				if (min < 10)
				{
					return hour + ":" + "0" + min + " " + flag;
				}
				
				return hour + ":" + min + " " + flag;
			}
			
			protected function searchBtn_enterHandler(event:FlexEvent):void
			{
				if (searchBox.text.length > 0)
					performSearch();
			}
			
			protected function searchBtn_clickHandler(event:MouseEvent):void
			{
				if (searchBox.text.length > 0)
					performSearch();
			}
			
			protected function performSearch():void
			{
				var tittle:Label = new Label;
				page = 1;
				switch (radiogroup1.selection) {
					case all :
						this.currentState = "AllSearch";
						displayGroup.removeAllElements();
						
						tittle.text = "People";
						peopleResults.addElement(tittle);
						var tittle2:Label = new Label;
						tittle2.text = "Groups";
						groupResults.addElement(tittle2);
						var tittle3:Label = new Label;
						tittle3.text = "Events";
						eventResults.addElement(tittle3);
						var tittle4:Label = new Label;
						tittle4.text = "Pages";
						pageResults.addElement(tittle4);

						FacebookDesktop.api("search", userSearchQuad, {q:searchBox.text, type:'user'});
						FacebookDesktop.api("search", groupSearchQuad, {q:searchBox.text, type:'group'});
						FacebookDesktop.api("search", eventSearchQuad, {q:searchBox.text, type:'event'});
						FacebookDesktop.api("search", pageSearchQuad, {q:searchBox.text, type:'page'});
						
						currentSearch = searchBox.text;
						
						break;
					case people :
						this.currentState = "PeopleSearch";
						backImage.visible = false;
						forwardImage.visible = true;
						displayGroup.removeAllElements();
						tittle.text = "People";
						peopleResults.addElement(tittle);
						FacebookDesktop.api("search", userSearchResults, {q:searchBox.text, type:'user', limit:75});
						break;
					case groups :
						this.currentState = "GroupsSearch";
						backImage.visible = false;
						forwardImage.visible = true;
						displayGroup.removeAllElements();
						tittle.text = "Groups";
						groupResults.addElement(tittle);
						FacebookDesktop.api("search", groupSearchResults, {q:searchBox.text, type:'group', limit:75});
						break;
					case events :
						this.currentState = "EventsSearch";
						backImage.visible = false;
						forwardImage.visible = true;
						displayGroup.removeAllElements();
						tittle.text = "Events";
						eventResults.addElement(tittle);
						FacebookDesktop.api("search", eventSearchResults, {q:searchBox.text, type:'event', limit:75});
						break;
					case pages :
						this.currentState = "PagesSearch";
						backImage.visible = false;
						forwardImage.visible = true;
						displayGroup.removeAllElements();
						tittle.text = "Pages";
						pageResults.addElement(tittle);
						FacebookDesktop.api("search", pageSearchResults, {q:searchBox.text, type:'page', limit:75});
						break;
					
				}
			}
			
			
			protected function forwardImage_clickHandler(event:MouseEvent):void
			{
				backImage.visible = true;
				displayGroup.removeAllElements();
				if (page < 3)
					page++;
				if (page == 3)
					forwardImage.visible = false;
				switch(this.currentState){
					case "PeopleSearch":
						userSearchResults(peopleResult, peopleFail);
						break;
					case "GroupsSearch":
						userSearchResults(groupResult, groupFail);
						break;
					case "EventsSearch":
						userSearchResults(eventResult, eventFail);
						break;
					case "PagesSearch":
						userSearchResults(pageResult, pageFail);
						break;
				}
			}
			
			protected function backImage_clickHandler(event:MouseEvent):void
			{
				displayGroup.removeAllElements();
				forwardImage.visible = true;
				if (page > 1)
					page--;
				if (page == 1)
					backImage.visible = false;
				switch(this.currentState){
					case "PeopleSearch":
						userSearchResults(peopleResult, peopleFail);
						break;
					case "GroupsSearch":
						userSearchResults(groupResult, groupFail);
						break;
					case "EventsSearch":
						userSearchResults(eventResult, eventFail);
						break;
					case "PagesSearch":
						userSearchResults(pageResult, pageFail);
						break;
				}
			}
			
			protected function detailedSearch_clickHandler(event:MouseEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="loggedOut"/>
		<s:State name="loggedIn"/>
		<s:State name="AllSearch"/>
		<s:State name="PeopleSearch"/>
		<s:State name="GroupsSearch"/>
		<s:State name="EventsSearch"/>
		<s:State name="PagesSearch"/>
	</s:states>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout.AllSearch>
		<s:BasicLayout/>
	</s:layout.AllSearch>
	<s:layout.loggedOut>
		<s:BasicLayout/>
	</s:layout.loggedOut>
	<s:layout.PeopleSearch>
		<s:BasicLayout/>
	</s:layout.PeopleSearch>
	<s:layout.GroupsSearch>
		<s:BasicLayout/>
	</s:layout.GroupsSearch>
	<s:layout.EventsSearch>
		<s:BasicLayout/>
	</s:layout.EventsSearch>
	<s:layout.PagesSearch>
		<s:BasicLayout/>
	</s:layout.PagesSearch>
	<s:Image id="circlebg" includeIn="EventsSearch,GroupsSearch,PagesSearch,PeopleSearch" left="0"
			 top="30" source="assets/circle.png"/>
	<s:Image id="circlebgall" includeIn="AllSearch" left="0"
			 top="30" source="assets/circlequads.png"/>
	<s:Form includeIn="EventsSearch,AllSearch,PeopleSearch,PagesSearch,loggedIn,GroupsSearch" x="10"
			y="52" width="250" height="191"
			>
		<s:FormItem width="234"
					backgroundColor="#DFE3EE"
					contentBackgroundColor="#DFE3EE">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:TextInput id="searchBox" enter="searchBtn_enterHandler(event)"/>
			<s:Button id="searchBtn" label="Search" click="searchBtn_clickHandler(event)"
					  skinClass.AllSearch="facebookbutton"
					  skinClass.EventsSearch="facebookbutton"
					  skinClass.GroupsSearch="facebookbutton"
					  cornerRadius.loggedIn="0"
					  skinClass.PagesSearch="facebookbutton"
					  skinClass.PeopleSearch="facebookbutton"/>
		</s:FormItem>
		<s:RadioButton id="all" label="All" groupName="radiogroup1"
					   selected.AllSearch="true"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="true"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="people" label="People" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="true"/>
		<s:RadioButton id="groups" label="Groups" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="true"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="events" label="Events" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="true"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="pages" label="Pages" groupName="radiogroup1" selected="true"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="true"
					   selected.PeopleSearch="false"/>
	</s:Form>
	<s:Group id="displayGroup"
			 includeIn="AllSearch,EventsSearch,GroupsSearch,PagesSearch,PeopleSearch" x="284" y="52"
			 width="730" height="690">
		<!-- x="150" -->
		<!--<ns1:CircleDrawer x="173" y="173" width="1" height="1"/>-->
		<!--<ns1:RectangleDrawer x="0" y="0" width="1" height="1" />-->
		<s:VGroup id="peopleResults" includeIn="AllSearch,PeopleSearch" x="22" y="10" width="200"
				  height="200" horizontalAlign="center"
				  width.PeopleSearch="485" height.PeopleSearch="614">
			
		</s:VGroup>
		<s:VGroup id="groupResults" includeIn="AllSearch,GroupsSearch" x="300" y="10" width="200"
				  height="200" horizontalAlign="center"
				  x.GroupsSearch="24" y.GroupsSearch="10" width.GroupsSearch="517"
				  height.GroupsSearch="624">
			
		</s:VGroup>
		<s:VGroup id="eventResults" includeIn="AllSearch,EventsSearch" x="22" y="510" width="200"
				  height="200" horizontalAlign="center"
				  x.AllSearch="22" y.AllSearch="480"
				  x.EventsSearch="48" y.EventsSearch="17" width.EventsSearch="490"
				  height.EventsSearch="608">
			
		</s:VGroup>
		<s:VGroup id="pageResults" includeIn="AllSearch,PagesSearch" x="300" y="510" width="200"
				  height="200" horizontalAlign="center"
				  x.AllSearch="300" y.AllSearch="480"
				  x.PagesSearch="32" y.PagesSearch="15" width.PagesSearch="545"
				  height.PagesSearch="600">
			
		</s:VGroup>
		
	</s:Group>
	<s:Image includeIn="loggedOut" x="210" y="282" source="assets/intro.png"/>
	<s:Image id="searchbooktitleBar" x="0" y="0" width="100%" source="assets/searchbook_title3.png"/>	
	<s:Button id="loginoutBtn0" includeIn="loggedOut" right="10" top="13" label="Log In"
			  click="login()" skinClass="skins.FBLoginButtonSkin"/>
	<s:Button id="loginoutBtn1" includeIn="AllSearch,EventsSearch,GroupsSearch,PagesSearch,PeopleSearch,loggedIn" right="10" top="13" label="Log Out"
			  click="logout()" skinClass="skins.FBLogoutButtonSkin"/>
	<!--<s:Button id="testPositions" skinClass="skins.FBLoginButtonSkin"-->
	<mx:LinkButton id="helpLink" label="help"
				   click="navigateToURL(new URLRequest('http://www.cs.columbia.edu/~cg2486/ui/searchbook/user_manual.html'),'User Manual')"
				   color="#FFFFFF" enabled="true" fontFamily="Verdana" textDecoration="underline"
				   right="109" top="13"/>
	
		<s:Image id="userImg" includeIn="loggedIn,AllSearch,PeopleSearch,GroupsSearch,EventsSearch,PagesSearch" x="609" y="379"/>
		<s:Label id="nameLbl"
				 includeIn="AllSearch,EventsSearch,PeopleSearch,GroupsSearch,PagesSearch,loggedIn"
				 right="159" top="20" color="#FFFFFF" fontFamily="Verdana" fontWeight="bold"/>
	<s:Image id="backImage" includeIn="EventsSearch,GroupsSearch,PagesSearch,PeopleSearch"
			 visible="true" click="backImage_clickHandler(event)"
			 x="179" y="640" source="assets/out.png"/>
	<s:Image id="forwardImage" includeIn="EventsSearch,GroupsSearch,PagesSearch,PeopleSearch" x="193"
			 y="657" click="forwardImage_clickHandler(event)"
			 source="assets/in.png"/>

	
	
</s:WindowedApplication>
