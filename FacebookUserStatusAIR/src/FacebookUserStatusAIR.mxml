<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ns1="*"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   width="1024" height="768"
					   skinClass="skins.ScrollingSkin"
					   maxWidth="1024"
					   maxHeight="768">
	<fx:Script>
		<![CDATA[
			import com.facebook.graph.FacebookDesktop;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			
			private var positions:ArrayList;
			private var counter:int;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				FacebookDesktop.init("279597868748971", loginHandler );
				
			}
			protected function loginHandler(success:Object,fail:Object):void { 
				if(success){ 
					currentState="loggedIn";
					//nameLbl.text=success.user.name;
					//userImg.source=FacebookDesktop.getImageUrl(success.uid,"small");
					//birthdayLbl.text=success.user.birthday;
					//FacebookDesktop.api("/me/statuses",getStatusHandler);
					
				}
			}
			
			//Calls a Facebook log in window 
			protected function login():void
			{
				FacebookDesktop.login(loginHandler, ["user_birthday","read_stream", "friends_location"]);
				
			}
			protected function logout():void { 
				FacebookDesktop.logout(); 
				currentState="loggedOut";
			}
			/*protected function getStatusHandler(result:Object, fail:Object):void {
				statusLbl.text=result[0].message;
			}*/
			
			protected function displayResults(result:Object, toolTipInfo:String):void
			{
				var resultInfo:InformationDisplay;
				
				resultInfo = new InformationDisplay(result.name, "https://facebook.com/" + result.id, FacebookDesktop.getImageUrl(result.id,"square"), toolTipInfo) ;
				resultInfo.x = (positions.getItemAt(counter) as Point).x;
				resultInfo.y = (positions.getItemAt(counter) as Point).y;
				
				displayGroup.addElement(resultInfo);
				counter++;
			}
			
			protected function userDisplayFunction(result:Object, fail:Object):void{
					
					var toolTipInfo:String = new String();
					
					if(!(result.location == undefined))
					{
						if(result.location.hasOwnProperty("name"))
						{
							toolTipInfo = result.name + "\n" + result.location.name;
						}
					}
					else{
						toolTipInfo = result.name;
					}
					
					displayResults(result, toolTipInfo);
			}
			protected function groupDisplayFunction(result:Object, fail:Object):void{
				var toolTipInfo:String = new String();
				
				if(result.hasOwnProperty("description"))
				{
					var des:String = result.description;
					if (des.length > 150)
					{
						toolTipInfo = des.slice(0, 150) + "...";
					}
					else
					{
						toolTipInfo = des;
					}
				}
				else
				{
					toolTipInfo = "(no description)";
				}
				displayResults(result, toolTipInfo);
				
			}
			protected function eventDisplayFunction(result:Object, fail:Object):void{
				var toolTipInfo:String = new String();
				
				if (result.hasOwnProperty("start_time"))
				{
					var start:String = result.start_time;
					var sdate:String = start.split("T",2)[0];
					var stime:String = start.split("T",2)[1];
					
					
					toolTipInfo += "Start: " + formatDate(sdate) + " " + formatTime(stime) + "\n";	
				}
				if (result.hasOwnProperty("end_time"))
				{
					var end:String = result.end_time;
					var edate:String = end.split("T",2)[0];
					var etime:String = end.split("T",2)[1];
					
					toolTipInfo += "End: " + formatDate(edate) + " " + formatTime(etime) + "\n"
				}
				if (result.hasOwnProperty("location"))
				{
					toolTipInfo += "Location: " + result.location;
				}
				
				if (toolTipInfo == "")
				{
					toolTipInfo = "no result";
				}
				
				displayResults(result, toolTipInfo);
				
			}
			
			/*
				Not called
			*/
			protected function positioningDisplayFunction():void{
				var myList:ArrayList = calculatePositions();
				var a:int = 0;
				var myPoint:Point = new Point();// = myList.getItemAt(0) as Point;
				//while (a<myList.length){
				while(a<1){
					myPoint = myList.getItemAt(a) as Point;
					displayGroup.addElement(new RectangleDrawer(myPoint.x, myPoint.y, 80, 80));
					a++;
					
				}
				
				//displayGroup.addElement(new InformationDisplay().x
				
				//displayGroup.addElement(new RectangleDrawer(100, 100, 25, 150));
				//displayGroup.addElement(new RectangleDrawer2());
			}
			
			protected function pageDisplayFunction(result:Object, fail:Object):void{
				var toolTipInfo:String = new String();
				
				if(result.hasOwnProperty("category"))
				{
					toolTipInfo += result.category + "\n";
				}
				if(result.hasOwnProperty("bio"))
				{
					var bio:String = result.bio;
					if (bio.length > 150)
					{
						toolTipInfo += "Bio: " + bio.slice(0, 150) + "...";
					}
					else
					{
						toolTipInfo += "Bio: " + bio;
					}
				}
				
				if (toolTipInfo == "")
				{
					toolTipInfo = "(no description)";
				}
				
				displayResults(result, toolTipInfo);
				
			}
			
			protected function calculatePositions():ArrayList{
				var myArrayList:ArrayList = new ArrayList();
				
				//var height:int = Math.abs(displayGroup.scaleGridBottom - displayGroup.scaleGridTop);
				//var halfHeight:int = height/2;
				//var center:int = (displayGroup.scaleGridBottom + displayGroup.scaleGridTop)/2;
				var centerX:int = 240;
				var centerY:int = 320;
				var height:int = 610;
				var halfHeight:int = height/2;
				var width:int = 875;
				var halfWidth:int = width/2;
				
				var numLevels:int = 3;
				var i:int = 0;
				var j:int = 0;
				var numPoints:int = 0;
				
				var angle:int = 90;
				var angleIncrement:int = 0;
				var currentLevel:int = 0;
				
				var tempX:int = 0;
				var tempY:int = 0;
				var distanceX:int = 0;
				var distanceY:int = 0;
				
				while(i<numLevels){ //loop through all levels
					angle = 90;
					currentLevel = i+1;
					//numPoints = currentLevel*4; //how many points to add per level
					if (currentLevel==1){
						numPoints = 4;
						angle=90;
					}
					else if (currentLevel==2){
						numPoints = 8;
						angle = 90;
					}
					else if (currentLevel==3){
						numPoints = 12;
						angle = 90;	
					}
					else{
						numPoints = 4;
					}
					angleIncrement = 360/numPoints; //how much to increment the angle
					if (currentLevel==1){
						distanceX = 3*(halfWidth/numLevels)/4  + /*+ 15 + */(halfWidth/numLevels)*(i);
						distanceY = 3*(halfHeight/numLevels)/4 + (halfHeight/numLevels)*(i);
					}
					else{
						distanceX = 3*(halfWidth/numLevels)/4 + /*+ 15 + */(halfWidth/numLevels)*(i);
						distanceY = 3*(halfHeight/numLevels)/4 + (halfHeight/numLevels)*(i);
					}
					while (j<numPoints){
						angle -= angleIncrement;
						if (angle < 0)
							angle+=360;
						tempX = centerX + (distanceX)*Math.cos(angle*Math.PI/180);
						tempY = centerY + (distanceY)*Math.sin(angle*Math.PI/180);
						myArrayList.addItem(new Point(tempX , tempY));
						j++;
					}
					j = 0;
					i++;
				}
				
				return myArrayList;
			}
			
			protected function userSearchResults(result:Object, fail:Object):void {
				var count:int = 0;
				//count2 = 0;
				counter = 0;
				
				positions = calculatePositions();
			
				if (result.length > 0){
					//check index of array don't go out of Bounds
					while (count < 24 && count < result.length){
						FacebookDesktop.api(result[count].id, userDisplayFunction);
						count++;
					}
				}
			}
			protected function groupSearchResults(result:Object, fail:Object):void {
				
				var count:int = 0;
				counter = 0;
				
				if (result.length > 0){
					//check index of array don't go out of Bounds
					while (count < 24 && count < result.length){
						FacebookDesktop.api(result[count].id, groupDisplayFunction);
						count++;
					}
				}
			}
			protected function eventSearchResults(result:Object, fail:Object):void {
				
				var count:int = 0;
				counter = 0;
				
				if (result.length > 0){
					//check index of array don't go out of Bounds
					while (count < 24 && count < result.length){
						FacebookDesktop.api(result[count].id, eventDisplayFunction);
						count++;
					}
				}
			}
			protected function pageSearchResults(result:Object, fail:Object):void {
				var count:int = 0;
				counter = 0;
				
				if (result.length > 0){
					//check index of array don't go out of Bounds
					while (count < 24 && count < result.length){
						FacebookDesktop.api(result[count].id, pageDisplayFunction);
						count++;
					}
				}
			}
			
			protected function formatDate(date:String):String
			{
				var arr:Array = date.split('-', 3);
				
				var date:String = arr[1] + "/" + arr[2] + "/" + arr[0];
				
				return date;
			}
			
			protected function formatTime(time:String):String
			{
				var arr:Array = time.split(':', 3);
				var hour:int = parseInt(arr[0]);
				var min:int = parseInt(arr[1]);
				var flag:String = "AM";
				
				
				if (hour == 0)
				{
					hour = 12;
				}
				else if (hour >= 12)
				{
					flag = "PM";
					hour -= 12;
				}
				
				if (min < 10)
				{
					return hour + ":" + "0" + min + " " + flag;
				}
				
				return hour + ":" + min + " " + flag;
			}
			
			protected function searchBtn_enterHandler(event:FlexEvent):void
			{
				if (searchBox.text.length > 0)
					performSearch();
			}
			
			protected function searchBtn_clickHandler(event:MouseEvent):void
			{
				if (searchBox.text.length > 0)
					performSearch();
			}
			
			protected function performSearch():void
			{
				var tittle:Label = new Label;
				
				switch (radiogroup1.selection) {
					case all :
						this.currentState = "AllSearch";
						displayGroup.removeAllElements();
						
						tittle.text = "People";
						peopleResults.addElement(tittle);
						var tittle2:Label = new Label;
						tittle2.text = "Groups";
						groupResults.addElement(tittle2);
						var tittle3:Label = new Label;
						tittle3.text = "Events";
						eventResults.addElement(tittle3);
						var tittle4:Label = new Label;
						tittle4.text = "Pages";
						pageResults.addElement(tittle4);
						FacebookDesktop.api("search", userSearchResults, {q:searchBox.text, type:'user'});
						FacebookDesktop.api("search", groupSearchResults, {q:searchBox.text, type:'group'});
						FacebookDesktop.api("search", eventSearchResults, {q:searchBox.text, type:'event'});
						FacebookDesktop.api("search", pageSearchResults, {q:searchBox.text, type:'page'});
						break;
					case people :
						this.currentState = "PeopleSearch";
						displayGroup.removeAllElements();
						tittle.text = "People";
						peopleResults.addElement(tittle);
						FacebookDesktop.api("search", userSearchResults, {q:searchBox.text, type:'user'});
						break;
					case groups :
						this.currentState = "GroupsSearch";
						displayGroup.removeAllElements();
						tittle.text = "Groups";
						groupResults.addElement(tittle);
						FacebookDesktop.api("search", groupSearchResults, {q:searchBox.text, type:'group'});
						break;
					case events :
						this.currentState = "EventsSearch";
						displayGroup.removeAllElements();
						tittle.text = "Events";
						eventResults.addElement(tittle);
						FacebookDesktop.api("search", eventSearchResults, {q:searchBox.text, type:'event'});
						break;
					case pages :
						this.currentState = "PagesSearch";
						displayGroup.removeAllElements();
						tittle.text = "Pages";
						pageResults.addElement(tittle);
						FacebookDesktop.api("search", pageSearchResults, {q:searchBox.text, type:'page'});
						break;
					
				}
			}
			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="loggedOut"/>
		<s:State name="loggedIn"/>
		<s:State name="AllSearch"/>
		<s:State name="PeopleSearch"/>
		<s:State name="GroupsSearch"/>
		<s:State name="EventsSearch"/>
		<s:State name="PagesSearch"/>
	</s:states>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout.AllSearch>
		<s:BasicLayout/>
	</s:layout.AllSearch>
	<s:layout.loggedOut>
		<s:BasicLayout/>
	</s:layout.loggedOut>
	<s:layout.PeopleSearch>
		<s:BasicLayout/>
	</s:layout.PeopleSearch>
	<s:layout.GroupsSearch>
		<s:BasicLayout/>
	</s:layout.GroupsSearch>
	<s:layout.EventsSearch>
		<s:BasicLayout/>
	</s:layout.EventsSearch>
	<s:layout.PagesSearch>
		<s:BasicLayout/>
	</s:layout.PagesSearch>
	<s:Form includeIn="EventsSearch,AllSearch,PeopleSearch,PagesSearch,loggedIn,GroupsSearch"
			x="10" y="52" width="266" height="283">
		<s:FormItem width="177"
					width.loggedIn="345">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:TextInput id="searchBox" enter="searchBtn_enterHandler(event)"/>
			<s:Button id="searchBtn" label="Search" click="searchBtn_clickHandler(event)"/>
		</s:FormItem>
		<s:RadioButton id="all" label="All" groupName="radiogroup1"
					   selected.AllSearch="true"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="true"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="people" label="People" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="true"/>
		<s:RadioButton id="groups" label="Groups" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="true"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="events" label="Events" groupName="radiogroup1"
					   selected.AllSearch="false"
					   selected.EventsSearch="true"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="false"
					   selected.PeopleSearch="false"/>
		<s:RadioButton id="pages" label="Pages" groupName="radiogroup1" selected="true"
					   selected.AllSearch="false"
					   selected.EventsSearch="false"
					   selected.GroupsSearch="false"
					   selected.loggedIn="false"
					   selected.PagesSearch="true"
					   selected.PeopleSearch="false"/>
	</s:Form>
	<s:Group id="displayGroup"
			 includeIn="AllSearch,EventsSearch,GroupsSearch,PagesSearch,PeopleSearch" x="284" y="52"
			 width="730" height="690">
		<!-- x="150" -->
		<!--<ns1:CircleDrawer x="173" y="173" width="1" height="1"/>-->
		<!--<ns1:RectangleDrawer x="0" y="0" width="1" height="1" />-->
		<s:VGroup id="peopleResults" includeIn="AllSearch,PeopleSearch" x="22" y="10" width="200"
				  height="200" horizontalAlign="center"
				  width.PeopleSearch="485" height.PeopleSearch="614">
			
		</s:VGroup>
		<s:VGroup id="groupResults" includeIn="AllSearch,GroupsSearch" x="300" y="10" width="200"
				  height="200" horizontalAlign="center"
				  x.GroupsSearch="24" y.GroupsSearch="10" width.GroupsSearch="517"
				  height.GroupsSearch="624">
			
		</s:VGroup>
		<s:VGroup id="eventResults" includeIn="AllSearch,EventsSearch" x="22" y="510" width="200"
				  height="200" horizontalAlign="center"
				  x.AllSearch="22" y.AllSearch="480"
				  x.EventsSearch="48" y.EventsSearch="17" width.EventsSearch="490"
				  height.EventsSearch="608">
			
		</s:VGroup>
		<s:VGroup id="pageResults" includeIn="AllSearch,PagesSearch" x="300" y="510" width="200"
				  height="200" horizontalAlign="center"
				  x.AllSearch="300" y.AllSearch="480"
				  x.PagesSearch="32" y.PagesSearch="15" width.PagesSearch="545"
				  height.PagesSearch="600">
			
		</s:VGroup>
		
	</s:Group>
	<s:Image includeIn="loggedOut" x="150" y="234" source="assets/intro.png"/>
	<s:Image id="searchbooktitleBar" includeIn="loggedOut" x="0" y="0" width="100%"
			 source="assets/searchbook_title3.png"
			 x.AllSearch="0" y.AllSearch="0"
			 x.EventsSearch="0" y.EventsSearch="0"
			 x.GroupsSearch="0" y.GroupsSearch="0"
			 left.loggedIn="0" top.loggedIn="0"
			 x.PagesSearch="0" y.PagesSearch="0"
			 x.PeopleSearch="0" y.PeopleSearch="0"/>	
	<s:Button id="loginoutBtn0" includeIn="loggedOut" right="10" top="13" label="Log In"
			  click="login()" skinClass="skins.FBLoginButtonSkin"/>
	<s:Button id="loginoutBtn1" includeIn="AllSearch,EventsSearch,GroupsSearch,PagesSearch,PeopleSearch,loggedIn" right="10" top="13" label="Log Out"
			  click="logout()" skinClass="skins.FBLogoutButtonSkin"/>
	<!--<s:Button id="testPositions" skinClass="skins.FBLoginButtonSkin"-->
	<mx:LinkButton id="helpLink" label="help"
				   click="navigateToURL(new URLRequest('http://www.cs.columbia.edu/~cg2486/ui/searchbook/user_manual.html'),'User Manual')"
				   color="#FFFFFF" enabled="true" fontFamily="Verdana" textDecoration="underline"
				   right.AllSearch="109" top.AllSearch="13"
				   right.EventsSearch="109" top.EventsSearch="13"
				   right.GroupsSearch="109" top.GroupsSearch="13"
				   right.loggedIn="109" top.loggedIn="13"
				   right.loggedOut="109" top.loggedOut="13"
				   right.PagesSearch="109" top.PagesSearch="13"
				   right.PeopleSearch="109" top.PeopleSearch="13"/>
	
</s:WindowedApplication>
